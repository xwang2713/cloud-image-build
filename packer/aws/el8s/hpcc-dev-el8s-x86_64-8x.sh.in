#!/bin/bash

function install_additional_packages
{
  for package in $1
  do
    echo "Download $package"
    wget http://mirror.centos.org/centos/8-stream/PowerTools/x86_64/os/Packages/${package}
    echo "Install $package"
    sudo yum install -y ${package}
    rm -rf ${package}
  done
}

export codename=el8s
export arch=amd64
export pkgType=rpm
export now=$(date -u +%Y%m%d-%H%M)

echo "wait 180"
sleep 180
echo "done waiting"

sudo yum update -y

sleep 10

echo "Installing HPCC build prerequisites"

sudo yum install -y                    \
	         epel-release          \
	         git                   \
		 zip                   \
		 unzip                 \
		 wget                  \
		 libtool               \
		 automake              \
                 bison                 \
                 flex                  \
		 libuuid-devel         \
                 binutils-devel        

# mono
sudo yum install -y yum-utils
sudo rpm --import "http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF"
#sudo rpm --import 'http://pool.sks-keyservers.net/pks/lookup?op=get&search=0x3fa7e0328081bff6a14da29aa6a19b38d3d831ef'
#sudo yum-config-manager --add-repo http://download.mono-project.com/repo/centos/
sudo dnf config-manager --add-repo https://download.mono-project.com/repo/centos8-stable.repo
sudo yum clean all
sudo yum makecache

#sudo yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm

sudo dnf install -y mono-complete
which mono
mono --version


sudo yum install -y \
	    autoconf                 \
	    make                     \
	    libcurl-devel            \
	    openssl-devel            \
	    openldap-devel           \
                 numactl-devel         \
                 libevent-devel        \
                 java-11-openjdk-devel \
                 sqlite-devel          \
                 rpm-build             \
                 curl-devel            \
		 libuv \
                 mysql-devel

sudo yum install -y \
	hiredis-devel            \
        libuuid-devel            \
	libbsd-devel             \
        ncurses-devel

#sudo yum install -y libmemcached-devel
install_additional_packages "libmemcached-devel-1.0.18-17.el8.x86_64.rpm"
install_additional_packages "libarchive-devel-3.3.3-1.el8.x86_64.rpm"
#other_hpcc_required=
#install_additional_packages "${other_hpcc_required}"

echo "Get expected CMake"
export cmake_version=3.22.1
export cmake_name=cmake-${cmake_version}-Linux-x86_64
wget https://github.com/Kitware/CMake/releases/download/v${cmake_version}/${cmake_name}.tar.gz
tar -zxf ${cmake_name}.tar.gz
rm -rf ${cmake_name}.tar.gz
cmake_name=$(echo $cmake_name | tr '[:upper:]' '[:lower:]')
sudo cp -r ${cmake_name}/* /usr/local/
sudo rm -rf ${cmake_name}

#V8=v8-6.7.17-8.el8.x86_64.rpm 
#V8_DEVEL=v8-devel-6.7.17-8.el8.x86_64.rpm
#wget http://repo.okay.com.mx/centos/8/x86_64/release/${V8}
#wget http://repo.okay.com.mx/centos/8/x86_64/release/${V8_DEVEL}
#sudo yum install ${V8} ${V8_DEVEL}
#rm -rf ${V8} ${V8_DEVEL}

sudo yum module install -y python39/build --allowerasing
#sudo yum module install python36/build
sudo alternatives --set python /usr/bin/python3
sudo yum install -y python3-pip
sudo pip3 install --upgrade pip3
sudo dnf module reset nodejs
sudo dnf module install -y nodejs:16/development
sudo yum install -y mysql-devel

# R
sudo yum module install -y perl:5.26

openblas_packages="perl-Unicode-EastAsianWidth-1.33-13.el8.noarch.rpm texinfo-6.5-6.el8.x86_64.rpm texinfo-tex-6.5-6.el8.x86_64.rpm openblas-openmp-0.3.15-1.el8.x86_64.rpm openblas-openmp64-0.3.15-1.el8.x86_64.rpm openblas-openmp64_-0.3.15-1.el8.x86_64.rpm openblas-serial64-0.3.15-1.el8.x86_64.rpm openblas-serial64_-0.3.15-1.el8.x86_64.rpm openblas-threads64-0.3.15-1.el8.x86_64.rpm openblas-threads64_-0.3.15-1.el8.x86_64.rpm openblas-devel-0.3.15-1.el8.x86_64.rpm"
install_additional_packages "$openblas_packages"

echo "Rcpp and Rinside packages: "
sudo yum install -y R-core R-core-devel
R_packages="Rcpp/Rcpp_1.0.7.tar.gz RInside/RInside_0.2.16.tar.gz"
for package_path in ${R_packages}
do
  echo $package_path | grep -q "/"
  if [ $? -eq 0 ]
  then
    pkg_dir=$(echo $package_path | cut -d '/' -f 1)
    package=$(echo $package_path | cut -d '/' -f 2)
    wget https://cran.r-project.org/src/contrib/00Archive/${pkg_dir}/${package}
  else
    package=$package_path
    wget https://cran.r-project.org/src/contrib/${package}
  fi

  # If the following cause connection dropped.
  # So we only download them and will install them during VM start
  echo "sudo R CMD INSTALL ${package}"
  sudo R CMD INSTALL ${package}
  rm -rf ${package}
done

echo "Maven"
MAVEN=apache-maven-3.6.3
wget http://apache.mirrors.hoobly.com/maven/maven-3/3.6.3/binaries/${MAVEN}-bin.tar.gz
sudo tar -zxvf ${MAVEN}-bin.tar.gz -C /usr/local

sudo ln -s /usr/local/${MAVEN} /usr/local/maven
sudo chmod 777 /etc/profile
sudo echo "export MAVEN_HOME=/usr/local/maven" >> /etc/profile
sudo echo "export PATH=\${MAVEN_HOME}/bin:\$PATH" >> /etc/profile
sudo chmod 644 /etc/profile
rm -rf ${MAVEN}-bin.tar.gz

sudo yum install -y atlas-devel           

# Additional packages
additional_packages="cppunit-1.14.0-4.el8.x86_64.rpm cppunit-devel-1.14.0-4.el8.x86_64.rpm"
install_additional_packages "$additional_packages"

# Setup Jenkins
sudo mkdir -p /var/lib/jenkins/workspace
sudo chown -R centos:centos /var/lib/jenkins
sudo ln -s /var/lib/jenkins /jenkins

echo "Install AWS Cli"
sudo pip3 install awscli --upgrade

echo "Import gpg key"
aws s3 cp s3://@S3_BUCKET@/HPCCSystems.priv .
gpg  --pinentry-mode=loopback --passphrase @GPG_PASSPHRASE@  --import HPCCSystems.priv
rm -rf HPCCSystems.priv

# VCPKG
WORKDIR=$(pwd)/hpcc-dev
mkdir -p ${WORKDIR}
echo "WORKDIR: $WORKDIR"
cd ${WORKDIR}
git clone -n https://github.com/hpcc-systems/vcpkg.git
BUILD_BRANCH=hpcc-platform-8.8.x
cd ${WORKDIR}/vcpkg
git checkout ${BUILD_BRANCH}
./bootstrap-vcpkg.sh

GITHUB_ACTOR=hpcc-systems
GITHUB_TOKEN=none
mono `${WORKDIR}/vcpkg/vcpkg fetch nuget | tail -n 1` \
    sources add \
    -name "GitHub" \
    -source "https://nuget.pkg.github.com/hpcc-systems/index.json" \
    -storepasswordincleartext \
    -username "${GITHUB_ACTOR}" \
    -password "${GITHUB_TOKEN}"

mono `${WORKDIR}/vcpkg/vcpkg fetch nuget | tail -n 1` \
    setapikey "${GITHUB_TOKEN}" \
    -source "https://nuget.pkg.github.com/hpcc-systems/index.json"

mkdir -p ${WORKDIR}/build
cd ${WORKDIR}/build

${WORKDIR}/vcpkg/vcpkg install \
  --clean-after-build \
  --overlay-ports=${WORKDIR}/vcpkg/overlays \
  --x-manifest-root=${WORKDIR}/vcpkg \
  --downloads-root=${WORKDIR}/build/vcpkg_downloads \
  --x-buildtrees-root=${WORKDIR}/build/vcpkg_buildtrees \
  --x-packages-root=${WORKDIR}/build/vcpkg_packages

#echo "Check icu error log"
#cat /home/centos/hpcc-dev/build/vcpkg_buildtrees/icu/autoconf-x64-linux-err.log

mono `${WORKDIR}/vcpkg/vcpkg fetch nuget | tail -n 1` \
    sources remove \
    -name "GitHub"
