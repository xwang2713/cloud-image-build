#!/bin/bash
export codename=el7
export arch=amd64
export pkgType=rpm
export now=$(date -u +%Y%m%d-%H%M)

echo "wait 180"
sleep 180
echo "done waiting"

sudo yum update

sudo yum install -y yum-utils
sudo rpm --import "http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF"
sudo yum-config-manager --add-repo http://download.mono-project.com/repo/centos/
sudo yum clean all
sudo yum makecache

#sudo yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm

sudo yum install -y mono-complete 
which mono
mono --version

sudo yum install -y epel-release
sudo yum update

sudo yum install -y curl \
	zip \
	unzip \
       	wget \
	zlib-devel \
	perl-ExtUtils-MakeMaker

#sudo yum install -y gcc10.x86_64 gcc10-c++.x86_64 
#gcc --version
echo "Install devtoolset-11"
sudo yum group install -y "Development Tools"
sudo yum install -y centos-release-scl
sudo yum install -y devtoolset-11
source /opt/rh/devtoolset-11/enable
which gcc
gcc --version
sudo sh -c 'echo "source /opt/rh/devtoolset-11/enable" >> /etc/bashrc'
echo "check g++"
which g++



wget --no-check-certificate https://pkg-config.freedesktop.org/releases/pkg-config-0.29.2.tar.gz
tar xvfz pkg-config-0.29.2.tar.gz
cd pkg-config-0.29.2
./configure --prefix=/usr/local/pkg_config/0_29_2 --with-internal-glib 
make -j4
sudo make install
sudo ln -s /usr/local/pkg_config/0_29_2/bin/pkg-config /usr/local/bin/
sudo mkdir -p /usr/local/share/aclocal
sudo ln -s /usr/local/pkg_config/0_29_2/share/aclocal/pkg.m4 /usr/local/share/aclocal/
sudo sh -c 'echo "export LD_LIBRARY_PATH=/usr/local/lib:${LD_LIBRARY_PATH}" >> /etc/profile'
sudo sh -c 'echo "export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:${PKG_CONFIG_PATH}" >> /etc/profile'
sudo sh -c 'echo "export ACLOCAL_PATH=/usr/local/share/aclocal:${ACLOCAL_PATH}" >> /etc/profile'
source /etc/profile
cd ..

# Install cmake and nodejs can be one of two options: either directly install or using vcpkg
#sudo yum install -y cmake3
#sudo ln -s /usr/bin/cmake3 /usr/bin/cmake
echo "Get expected CMake"
export cmake_version=3.23.2
export cmake_name=cmake-${cmake_version}-Linux-x86_64
wget https://github.com/Kitware/CMake/releases/download/v${cmake_version}/${cmake_name}.tar.gz
tar -zxf ${cmake_name}.tar.gz
rm -rf ${cmake_name}.tar.gz
cmake_name=$(echo $cmake_name | tr '[:upper:]' '[:lower:]')
sudo cp -r ${cmake_name}/* /usr/local/
rm -rf ${cmake_name}

echo "Installing Nodejs"
curl --silent --location https://rpm.nodesource.com/setup_16.x | sudo bash -
sudo yum install -y nodejs

#. <(curl https://aka.ms/vcpkg-init.sh -L)
#. ~/.vcpkg/vcpkg-init fetch cmake
#sudo ln -s `. ~/.vcpkg/vcpkg-init fetch cmake | tail -n 1` /usr/local/bin/
#sudo ln -s `. ~/.vcpkg/vcpkg-init fetch node | tail -n 1` /usr/local/bin/
#sudo ln -s `. ~/.vcpkg/vcpkg-init fetch node | tail -n 1 | sed -e 's!bin/node!bin/npm!g'` /usr/local/bin/

# Libs
sudo yum install -y \
	libcurl-devel            \
	openldap-devel           \
	libevent-devel           \
	sqlite-devel             \
	python3-devel            \
	java-11-openjdk-devel \
	libmemcached-devel       \
	heimdal-devel            \
        numactl-devel            \
	uuid-devel               \
	libuuid-devel            \
	ncurses-devel

echo "Test java"
which java
java -version

echo "Test python3 version"
which python3
python3 --version
echo "pip3 version"
which pip3
pip3 --version

# "Installing pip3"
#pip3 is probably already installed:
#sudo /opt/rh/rh-python36/root/usr/bin/pip3
#sudo yum install -y python3-pip
echo "Installing git"
wget --no-check-certificate https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz
ls -l ./git-2.9.5.tar.gz
tar -zxvf git-2.9.5.tar.gz
cd git-2.9.5
./configure
make -j4
sudo make install
cd ..
rm -rf git-2.9.5 git-2.9.5.tar.gz
which git


echo "Install openssl 1.1.1"
OPENSSL_PACKAGE=openssl-1.1.1s
wget --no-check-certificate https://www.openssl.org/source/${OPENSSL_PACKAGE}.tar.gz
tar -zxvf ${OPENSSL_PACKAGE}.tar.gz
cd ${OPENSSL_PACKAGE}
echo "configure openssl"
pwd
ls
ls -l config
./config
echo "compile openssl"
make 
echo "install openssl"
sudo make install
cd ..
rm -rf ${OPENSSL_PACKAGE}*
echo "check openssl"
ls -l /usr/local/bin/openssl
ls -l /usr/local/lib64/*ssl*


echo "sudo rpm -i mariadb-libs-5.5.68-1.el7.x86_64"
sudo rpm -e postfix-2:2.10.1-9.el7.x86_64
sudo rpm -e mariadb-libs-5.5.68-1.el7.x86_64

echo "Build MySQL 8"
sudo yum install -y patchelf
MYSQL_VERSION=8.0.31
MYSQL_PACKAGE=mysql-boost-8.0.31
wget --no-check-certificate https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-boost-${MYSQL_VERSION}.tar.gz
tar -zxvf mysql-boost-${MYSQL_VERSION}.tar.gz
mkdir ${MYSQL_VERSION}-build
pwd
ls
cd ${MYSQL_VERSION}-build
cmake ../mysql-${MYSQL_VERSION} -DWITH_BOOST=../mysql-${MYSQL_VERSION}/boost -DWITH_SSL=/usr/local
echo "compile mysql"
make 
echo "install mysql"
sudo make install
cd ..
rm -rf mysql*
echo "check mysql"
ls -l /usr/local/mysql


#MYSQL_DIR=MySQL-5.7
#MYSQL_DEVEL=mysql-community-devel-5.7.30-1.el7.x86_64.rpm
#MYSQL_COMM=mysql-community-common-5.7.30-1.el7.x86_64.rpm
#MYSQL_LIBS=mysql-community-libs-5.7.30-1.el7.x86_64.rpm
#wget http://mysql.mirrors.hoobly.com/Downloads/${MYSQL_DIR}/${MYSQL_COMM}
#wget http://mysql.mirrors.hoobly.com/Downloads/${MYSQL_DIR}/${MYSQL_LIBS}
#wget http://mysql.mirrors.hoobly.com/Downloads/${MYSQL_DIR}/${MYSQL_DEVEL}
#sudo rpm -i ${MYSQL_COMM} ${MYSQL_LIBS} ${MYSQL_DEVEL}
#echo "check installed mysql packages"
#sudo rpm -qa | grep -i mysql
#sudo rm -rf ${MYSQL_COMM} ${MYSQL_LIBS} ${MYSQL_DEVEL}


echo "Installing R"
sudo yum install -y R-core-devel
export Rcpp_package=Rcpp_0.12.19.tar.gz
wget https://cran.r-project.org/src/contrib/Archive/Rcpp/${Rcpp_package}
sudo R CMD INSTALL ${Rcpp_package}
rm -rf ${Rcpp_package}

export RInside_package=RInside_0.2.12.tar.gz
wget https://cran.r-project.org/src/contrib/Archive/RInside/${RInside_package}
sudo R CMD INSTALL ${RInside_package}
rm -rf ${RInside_package}

# Install libbsd-devel 
#sudo yum install -y libbsd-devel   #This probably will work
wget https://download-ib01.fedoraproject.org/pub/epel/7/x86_64/Packages/l/libbsd-devel-0.8.3-1.el7.x86_64.rpm
wget https://download-ib01.fedoraproject.org/pub/epel/7/x86_64/Packages/l/libbsd-0.8.3-1.el7.x86_64.rpm
rpm -i libbsd-0.8.3-1.el7.x86_64.rpm libbsd-devel-0.8.3-1.el7.x86_64.rpm
rm -rf libbsd-devel-0.8.3-1.el7.x86_64.rpm
rm -rf libbsd-0.8.3-1.el7.x86_64.rpm


# Setup Jenkins
sudo mkdir -p /var/lib/jenkins/workspace
sudo chown -R centos:centos /var/lib/jenkins
sudo ln -s /var/lib/jenkins /jenkins

echo "Install AWS Cli"
#sudo /opt/rh/rh-python36/root/usr/bin/pip3 install awscli --upgrade
#sudo pip3 install awscli --upgrade
sudo pip3 install awscli --upgrade


echo "Import gpg key"
aws s3 cp s3://@S3_BUCKET@/HPCCSystems.priv .
gpg --passphrase @GPG_PASSPHRASE@  --import HPCCSystems.priv
rm -rf HPCCSystems.priv

# VCPKG
WORKDIR=$(pwd)/hpcc-dev
mkdir -p ${WORKDIR}
echo "WORKDIR: $WORKDIR"
cd ${WORKDIR}
git clone -n https://github.com/hpcc-systems/vcpkg.git
BUILD_BRANCH=hpcc-platform-8.8.x
cd ${WORKDIR}/vcpkg
git checkout ${BUILD_BRANCH}
./bootstrap-vcpkg.sh

GITHUB_ACTOR=hpcc-systems
GITHUB_TOKEN=none
mono `${WORKDIR}/vcpkg/vcpkg fetch nuget | tail -n 1` \
    sources add \
    -name "GitHub" \
    -source "https://nuget.pkg.github.com/hpcc-systems/index.json" \
    -storepasswordincleartext \
    -username "${GITHUB_ACTOR}" \
    -password "${GITHUB_TOKEN}"

mono `${WORKDIR}/vcpkg/vcpkg fetch nuget | tail -n 1` \
    setapikey "${GITHUB_TOKEN}" \
    -source "https://nuget.pkg.github.com/hpcc-systems/index.json"

mkdir -p ${WORKDIR}/build
cd ${WORKDIR}/build

${WORKDIR}/vcpkg/vcpkg install \
  --clean-after-build \
  --overlay-ports=${WORKDIR}/vcpkg/overlays \
  --x-manifest-root=${WORKDIR}/vcpkg \
  --downloads-root=${WORKDIR}/build/vcpkg_downloads \
  --x-buildtrees-root=${WORKDIR}/build/vcpkg_buildtrees \
  --x-packages-root=${WORKDIR}/build/vcpkg_packages

#echo "Check icu error log"
#echo "cat /home/ec2-user/hpcc-dev/build/vcpkg_buildtrees/icu/autoconf-x64-linux-err.log"
#cat /home/ec2-user/hpcc-dev/build/vcpkg_buildtrees/icu/autoconf-x64-linux-err.log

mono `${WORKDIR}/vcpkg/vcpkg fetch nuget | tail -n 1` \
    sources remove \
    -name "GitHub"


